{"name":"Debootstick","tagline":"Generate a bootable live image from any Debian/Ubuntu filesystem tree.","body":"_Build Ubuntu bootable images the UNIX way._\r\n\r\nTrivial example:\r\n```\r\n$ debootstrap --arch=amd64 --variant=minbase trusty trusty_tree\r\n$ debootstick trusty_tree img.dd\r\n$ dd if=img.dd of=/dev/<your_device> bs=10M\r\n```\r\nYour USB device now embeds a live Ubuntu system and can be booted on any amd64 computer (UEFI or BIOS).\r\n\r\n__WARNING: this software is in alpha state. USE AT YOUR OWN RISK.__\r\n\r\nThe concept\r\n-----------\r\nGenerating a bootable image may be seen as a 3-steps process:\r\n\r\n1. Generate a filesystem tree\r\n2. Customize it\r\n3. Build a bootable image\r\n\r\n__debootstick__ takes care of step 3 only. As such, it follows the [UNIX philosophy](http://en.wikipedia.org/wiki/Unix_philosophy#Program_Design_in_the_UNIX_Environment). This limited scope makes it good at collaborating with other tools, such as __debootstrap__, __chroot__, or even __docker__.\r\n\r\nEmbedded OS features\r\n--------------------\r\nThe embedded system is:\r\n\r\n- ready to be used (no installation step, only an automatic decompression at 1st boot)\r\n- viable in the long-term, fully upgradable (including the kernel and the bootloader)\r\n- compact\r\n- compatible with BIOS and UEFI systems\r\n\r\nInstalling debootstick\r\n----------------------\r\nA package has been generated for Ubuntu 14.04.\r\n\r\nType:\r\n```\r\n$ add-apt-repository ppa:debootstick/ppa\r\n$ apt-get update\r\n$ apt-get install debootstick\r\n```\r\n\r\nStandard workflow: debootstrap, debootstick and kvm\r\n---------------------------------------------------\r\n\r\n1. Generate a filesystem tree:\r\n ```\r\n $ debootstrap --arch=amd64 --variant=minbase trusty /tmp/trusty_tree\r\n ```\r\n \r\n2. (Optionaly) customize it:\r\n ```\r\n $ chroot /tmp/trusty_tree; [...]; exit\r\n ```\r\n \r\n3. Generate the bootable image:\r\n ```\r\n $ debootstick /tmp/trusty_tree /tmp/img.dd\r\n ```\r\n \r\n4. Test it with kvm.\r\n ```\r\n $ cp /tmp/img.dd /tmp/img.dd-test    # let's work on a copy, our test is destructive\r\n $ truncate -s 2G /tmp/img.dd-test    # simulate a copy on a 2G-large USB stick\r\n $ kvm -hda /tmp/img.dd-test          # the test itself (BIOS mode)\r\n ```\r\n \r\n5. Copy the boot image to a USB stick or disk.\r\n ```\r\n $ dd bs=10M if=/tmp/img.dd of=/dev/your-device\r\n ```\r\n\r\nNote: it is also possible to test the UEFI boot with kvm, if you have the __ovmf__ package installed, by adding `-bios /path/to/OVMF.fd` to the `kvm` command line.\r\n\r\n\r\nTurning a docker container into a bootable image\r\n------------------------------------------------\r\n__Docker__ is a convenient tool when setting up an operating system. But, at the end of the process, sometimes we want to run this operating system on a real machine, instead of a container. With `debootstick`, we can achieve this easily. Here are a few guidelines.\r\n\r\nFirst, we can retrieve the filesystem tree of a docker container by using the `docker export` command. However, since this command accepts a docker container and not a docker image, we will have to generate a container from the image first. Here is a way to do it:\r\n```\r\n$ docker run --name mycontainer ubuntu:14.04 true\r\n```\r\nWe request a new container to be created from image `ubuntu:14.04`, in order to run the command `/bin/true` (it is a command that does nothing, but since we need one...).\r\n\r\nWe can know retrieve the content of this container, and then remove it.\r\n```\r\n$ mkdir mycontainer_fs \r\n$ cd mycontainer_fs/\r\n$ docker export mycontainer | tar xf -\r\n$ docker rm mycontainer   # not needed anymore\r\n```\r\n\r\nWe now have the filesystem tree in the current directory `mycontainer_fs`:\r\n```\r\n$ ls\r\nbin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var\r\n$ \r\n```\r\n\r\nThe OS embedded in official Ubuntu docker images is slightly customized. In particular, starting services is disallowed. We have to revert this:\r\n```\r\n$ chroot .\r\n$ rm /usr/sbin/policy-rc.d\r\n$ dpkg-divert --remove /sbin/initctl\r\n$ mv /sbin/initctl.distrib /sbin/initctl\r\n$ exit\t# from chroot\r\n```\r\n\r\nWe also need the DNS to be properly configured inside the filesystem, for __debootstick__ to run correctly. (In the future, __debootstick__ should handle this itself.)\r\n```\r\n$ cp /etc/resolv.conf ./etc/resolv.conf\r\n```\r\n\r\nWe can now use debootstick:\r\n```\r\n$ cd ..\r\n$ debootstick mycontainer_fs img_from_docker.dd\r\n```\r\n\r\nAnd that's it. We have our image. \r\n\r\nBefore dumping it to a USB device, we may prefer to test it:\r\n```\r\n$ cp img_from_docker.dd img_from_docker.dd-test\r\n$ truncate -s 2G img_from_docker.dd-test\r\n$ kvm -hda img_from_docker.dd-test -serial mon:stdio -nographic\r\n[...grub menu...]\r\n[...kernel messages...]\r\nUncompressing...\r\n|****************************************| 100%\r\n[...]\r\n\r\nUbuntu 14.04.1 LTS localhost ttyS0\r\n\r\nlocalhost login: root\r\nPassword: \r\nWelcome to Ubuntu 14.04.1 LTS ([...])\r\n[...]\r\n\r\nroot@localhost:~# echo \"We are inside the VM!\"\r\nWe are inside the VM!\r\nroot@localhost:~# \r\n```\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}