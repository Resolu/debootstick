#!/bin/bash

# The functions in this file are grouped in the following sections:
# - basic routines
# - failsafe mode handling
# - verbosity reduction
# - partitioning and formatting
# - system compression
# - UEFI support

# basic routines
# --------------
usage_and_exit()
{
    echo "Usage: debootstick [options] <fs_tree_dir> <out_image_path>" >&2
    exit $1
}

abspath()
{
    echo "$(cd "$(dirname "$1")" && pwd)/$(basename "$1")"
}

print_last_word()
{
    awk '{print $NF}'
}

busybox_mount()
{
    $busybox_path mount $*
}

mount_virtual_filesystems()
{
    failsafe mount -t devtmpfs none /dev
    failsafe mount -t proc none /proc
    failsafe mount -t devpts none /dev/pts
    failsafe mount -t sysfs none /sys
}

# divide %1/%2 rounding up
ceil()
{
    divide=$1
    by=$2
    echo $(((divide+by-1)/by))
}

estimated_size_xb()
{
    du -s$1 "$2" | awk '{print $1}'
}

estimated_size_kb()
{
    estimated_size_xb k $1
}

estimated_size_mb()
{
    estimated_size_xb m $1
}

# get total size needed taking into account 
# an overhead.
# $1: the initial size (not taking the overhead into account)
# $2: percent of overhead
# return value: the size needed (such that applying the 
#               overhead would get $1 again)
apply_overhead_percent()
{
    echo $((($1)*100/(100-($2))))
}

# apply several overheads
apply_overheads_percent()
{
    size=$1; shift
    while [ ! -z "$1" ]
    do
        size=$(apply_overhead_percent $size "$1")
        shift
    done
    echo $size
}

# failsafe mode handling
# ----------------------
# we want to leave the system in a clean state, 
# whatever happens. 
# for example, if a "disk full" error happens 
# in the middle of the chrooted-customization 
# step, we should be able to umount what have
# been mounted in the chroot, exit the chroot,
# umount things and remove peripherals created 
# by debootstick outside the chroot, before 
# exiting.
# we handle this by trapping the EXIT
# of the scripts. Also, each command creating
# a persistent artefact (mounts, devices, etc.) 
# is recorded, in order to be able to 'undo the 
# command' (i.e. remove the artefacts) if needed.

undo_all()
{
    # run saved failsafe commands prefixed with 'undo_'
    eval "$(echo -n "$failsafe_commands" | \
            awk '{print "undo_" $0}')"

    # flush variable 'failsafe_commands'
    failsafe_commands=""
}

on_exit()
{   # save exit code
    res=$?

    # get args
    toplevel=0
    if [ "$1" == "--toplevel" ]
    then
        toplevel=1
        shift
    fi 
    cleanup_function=$1

    # undo operations (remove artefacts)
    if [ $res -gt 0 -a $toplevel -eq 1 ]
    then
        echo
        echo "E: an error occured."
        echo -n "I: restoring a clean state... "
        undo_all
        echo "done"
    else
        undo_all
    fi

    # call an additional cleanup function 
    # if provided.
    if [ ! -z "$cleanup_function" ]
    then
        $cleanup_function $res
    fi

    return $res
}

start_failsafe_mode()
{
    # stop if an error occurs
    set -e
    # clean remaining artefacts before exitting
    trap "on_exit $*" EXIT

    # allow with constructs (see f_with function)
    alias with="while f_with"

    # bash does not expand aliases by default,
    # when running a script.
    # busybox sh does, and has no such configuration
    # option (thus the error ignoring construct)
    shopt -s expand_aliases 2>/dev/null || true
}

undo_mount_with_prefix()
{
    # I know 2 usual things that could cause umount
    # to fail with an error reporting that 'device is busy'.
    # Either one process has its current directory on this 
    # mount, or there is cached data that was not yet
    # written to disk. We handle these below.
    for last; do true; done # retrieve last arg
    cd / # just in case we would be on the mountpoint
    # some say that a sync request is treated asynchronously.
    # but if a second one comes in, then the first one is 
    # forced. Thus the 2 requests in row:
    sync; sync
    $1 umount "$last"
}

undo_mount()
{
    undo_mount_with_prefix "" $*
}

undo_busybox_mount()
{
    undo_mount_with_prefix "$busybox_path" $*
}

undo_mkdir()
{
    for last; do true; done # retrieve last arg
    rm -rf "$last"
}

undo_losetup()
{   # we assume the failsafe command was 
    # $ failsafe losetup <loop_device> <file>
    losetup -d "$1"
}

undo_kpartx()
{   # we assume the failsafe command was 
    # $ failsafe kpartx -a <disk_device>
    disk_device="$2"

    # we have to detach lvm devices associated
    # to the <disk_device>, then keep the related
    # partition in a busy state otherwise. 
    # Retrieving these devices is not so easy...
    partitions=$(kpartx -l $disk_device | \
                    awk '{ print "/dev/mapper/"$1 }')
    vg_names=$(pvs -o vg_name --noheadings $partitions 2>/dev/null || true)
    if [ ! -z "$vg_names" ]
    then
        lv_devices=$(lvs -o vg_name,lv_name --noheadings $vg_names | \
                        awk '{print "/dev/" $1 "/" $2}')
        for lv_device in $lv_devices
        do 
            dmsetup remove $lv_device
        done
    fi

    # we can now request the kernel to remove
    # <disk_device> partitions
    kpartx -d "$disk_device"
}

undo_chroot()
{
    exit
}

failsafe()
{
    $*  &&  \
    failsafe_commands="$( 
        echo "$*"
        echo -n "$failsafe_commands"
    )"
}

undo()
{
    # undo-ing one failsafe operation only

    # we have to remove this operation from 
    # variable 'failsafe_commands'.
    # first, we escape it in order to use
    # it in a sed statement below.
    escaped_cmd="$(
        echo "$*" | \
            sed -e 's/[\/&]/\\&/g')"
    # and now we remove it
    failsafe_commands="$(
        echo -n "$failsafe_commands" | \
            sed -e "/^$escaped_cmd\$/d"
    )"
    
    # of course we really undo it
    eval "undo_$*"
}

# the function f_with() allows constructs such as:
#
# with mount [...]; do
#   [...]
# done
#
# The unmount-ing will be done at the end of the
# block regardless of what happens inside (issue raised
# or not).
#
# 'with' is actually an alias involving this function
# and a while loop:
# with -> while f_with   (see 'start_failsafe_mode')
#
# we ensure that the while loop stops at the 2nd
# iteration.
f_with()
{
    # save the command
    cmd=$*
    # we need an id to recognise this construct
    with_id=$(echo $cmd | md5sum | awk '{print $1}')
    # let's load the stack of ids we have
    set -- $with_ids_stack

    # if this is a new id...
    if [ "$1" != "$with_id" ]
    then
        # this is a new 'with' construct
        # perform the command requested
        failsafe $cmd
        # update the stack
        with_ids_stack="$with_id $with_ids_stack"
        return 0    # continue the while loop
    else
        # second (and last) time through this 'with' construct
        # pop this id from the stack
        shift; with_ids_stack=$*
        # revert the command
        undo $cmd
        return 1    # stop the while loop
    fi
}


# verbosity reduction
# -------------------
io_unbuffered_mksquashfs()
{
    echo 1 > $mksquashfs_result_file	# default value
    script -q \
        -c "mksquashfs $* && echo 0 > $mksquashfs_result_file" \
        /dev/null
}

io_unbuffered_tr()
{
    stdbuf -i0 -o0 -e0 tr $*
}

io_unbuffered_grep()
{
    stdbuf -i0 -o0 -e0 grep $*
}

quiet_mksquashfs()
{
    task_name=$1
    shift
    
    mksquashfs_result_file=$(mktemp)

    io_unbuffered_mksquashfs $* | io_unbuffered_tr '\n[' '&\n'              \
                                | io_unbuffered_grep -oE "[0-9]+/[0-9]+"    \
                                | while read ratio
                                  do
                                        echo -en "I: $task_name... $((100*$ratio))%\r"
                                  done
    mksquashfs_return_value=$(cat $mksquashfs_result_file)
    rm $mksquashfs_result_file    

    if [ "$mksquashfs_return_value" = "0" ]
    then
        echo -e "I: $task_name... done"
    else
        echo -e "I: $task_name... failed"
    fi
    return $mksquashfs_return_value
}

quiet_grub_install()
{
    device=$1

    # grub-install & update-grub print
    # messages to standard error stream
    # although most of these are just
    # informational. Let's discard them.
    {
        grub-install $device    && \
        update-grub
        return_code=$?
    } 2>&1 |    grep -v "No error"          | \
                grep -v "Installing"        | \
                grep -v "Generating"        | \
                grep -v "Found .* image:"   | \
                grep -vx "done" 1>&2        || true
    
    # grep returns non-zero if no line is found.
    # in our case, having no error line is a good
    # thing, thus the or-true construct.
    # the return value we want is the one we stored
    # earlier:
    return $return_code
}

quiet()
{
    $* >/dev/null
}

# partitioning and formatting
# ---------------------------
make_root_fs()
{
    # IMPORTANT NOTE.
    # We try to create a USB stick as small as possible.
    # However, the embedded system may later by copied on a
    # potentially large disk.
    # Therefore, we specify the option '-T default' to mkfs.ext4.
    # This allows to select 'default' ext4 features even if this
    # filesystem might be considered 'small' for now.
    # This may seem cosmetic but it's not: if we omit this,
    # when we move to a large disk, resize2fs apparently enables
    # the 'meta_bg' option (supposedly trying to adapt as much as
    # possible this 'small' filesystem to a much larger device).
    # Since this option is not handled by grub, it prevents the
    # system from booting properly.
    mkfs.ext4 -F -q -L ROOT -T default -m 2 $1
}

partition_stick()
{
    device=$1
    efi_partition_size_kb=$2
    quiet sgdisk \
            -n 1:0:+${efi_partition_size_kb}K -t 1:ef00 \
            -n 2:0:+${BIOSBOOT_PARTITION_SIZE_KB}K -t 2:ef02 \
            -n 3:0:0 -t 3:8e00 $device
}

create_formatted_image()
{
    image_name=$1
    stick_size_kb=$2
    efi_partition_size_kb=$3
    lvm_vg=$4
    image_file="$5"
    if [ -z "$image_file" ]
    then
        mkdir -p $DBSTCK_TMPDIR/$image_name
        image_file=$DBSTCK_TMPDIR/$image_name/file
    fi
    
    # create image file
    rm -f "$image_file"
    $DD bs=1024 seek=$stick_size_kb count=0 of="$image_file"

    # partition it
    partition_stick "$image_file" $efi_partition_size_kb

    # let the kernel know about this device
    image_device=$(losetup -f)
    failsafe losetup $image_device "$image_file"
    failsafe kpartx -a $image_device

    # retrieve the partition devices
    set -- $(kpartx -l $image_device | awk '{ print "/dev/mapper/"$1 }')
    image_efipart_device=$1
    image_lvmpart_device=$3

    # create an lvm volume
    quiet pvcreate $image_lvmpart_device
    quiet vgcreate $lvm_vg $image_lvmpart_device
    quiet lvcreate -n ROOT -l 100%FREE $lvm_vg

    # format this lvm volume
    image_lvroot_device=/dev/$lvm_vg/ROOT
    make_root_fs $image_lvroot_device

    # format the efi partition
    quiet mkfs.vfat -n DBSTCK_EFI $image_efipart_device

    # mount efi partition and root volume
    image_lvroot_mountpoint=$DBSTCK_TMPDIR/$image_name/lvroot
    image_efipart_mountpoint=$DBSTCK_TMPDIR/$image_name/efipart
    mkdir -p $image_lvroot_mountpoint $image_efipart_mountpoint
    failsafe mount $image_lvroot_device $image_lvroot_mountpoint
    failsafe mount $image_efipart_device $image_efipart_mountpoint

    # let the calling code know what we have done
    eval "$(cat << EOF
${image_name}_file="$image_file"
${image_name}_device=$image_device
${image_name}_efipart_device=$image_efipart_device
${image_name}_efipart_mountpoint=$image_efipart_mountpoint
${image_name}_lvm_vg=$lvm_vg
${image_name}_lvmpart_device=$image_lvmpart_device
${image_name}_lvroot_device=$image_lvroot_device
${image_name}_lvroot_mountpoint=$image_lvroot_mountpoint
EOF
    )"
}

release_image()
{
    # read variables with prefix $1=draft or $1=final
    eval "$(cat << EOF
image_name=${1}
image_file="\${${1}_file}"
image_device=\${${1}_device}
image_efipart_device=\${${1}_efipart_device}
image_efipart_mountpoint=\${${1}_efipart_mountpoint}
image_lvm_vg=\${${1}_lvm_vg}
image_lvroot_device=\${${1}_lvroot_device}
image_lvroot_mountpoint=\${${1}_lvroot_mountpoint}
EOF
    )"

    # detach things
    undo mount $image_efipart_device $image_efipart_mountpoint
    undo mount $image_lvroot_device $image_lvroot_mountpoint
    undo kpartx -a $image_device
    undo losetup $image_device "$image_file"
}

# system compression
# ------------------
make_compressed_fs()
{   
    # these operations (up to the squashfs compression below)
    # should be fast: we are just removing or moving files 
    # in the same filesystem

    fs_tree=$(cd $1; pwd)
    
    # we will work with two subdirectories, 
    # '.fs.orig' & 'compressed'
    cd $fs_tree
    contents=$(ls -A)
    mkdir .fs.orig .fs.compressed
    mv $contents .fs.orig/
    
    cd .fs.orig

    # clean up
    rm -rf proc/* sys/* dev/* tmp/* run/* /var/cache/*

    # some files should be available early at boot 
    # (thus not compressed in the squashfs image)
    while read f
    do
        mkdir -p $(dirname $fs_tree/.fs.compressed/$f)
        mv $f $fs_tree/.fs.compressed/$f
    done << EOF
boot
bin/busybox
opt/debootstick/live/init/first-init.sh
$(find lib -name squashfs.ko)
EOF

    # move the init
    mv sbin/init sbin/init.orig
    
    # create compressed image
    quiet_mksquashfs "draft image - compressing (squashfs)" \
            $PWD $fs_tree/.fs.compressed/fs.squashfs $MKSQUASHFS_OPTS

    # the following operations should also be fast.

    # finalize compressed tree
    cd $fs_tree/.fs.compressed
    mkdir -p sbin proc sys tmp/os tmp/os_rw tmp/os_ro dev
    cd sbin
    ln -s ../opt/debootstick/live/init/first-init.sh init
    cd ../bin
    ln -s busybox sh

    # keep only the compressed version in fs_tree
    cd $fs_tree/.fs.compressed
    mv $(ls -A) ..
    cd ..
    rm -rf .fs.orig .fs.compressed
}

# UEFI support
# ------------

# we generate a standalone UEFI binary, used
# for booting on UEFI systems.
# actually, since we cannot install both grub-pc
# and grub-efi on the embedded system (conflict),
# we install grub-pc only. However, this binary 
# image just look for the configuration file generated
# by the grub-pc installation and loads it. Thus
# this UEFI configuration also stays up-to-date. 
build_uefi_binary_image()
{
    out_binary_path="$(abspath "$1")"
    mkdir -p $DBSTCK_TMPDIR/efi/boot/grub
    cd $DBSTCK_TMPDIR/efi
    cat > boot/grub/grub.cfg << EOF
insmod part_gpt
insmod lvm
search --set rootfs --label ROOT
configfile (\$rootfs)/boot/grub/grub.cfg
EOF
    grub-mkstandalone \
            --directory="/usr/lib/grub/x86_64-efi/" --format="x86_64-efi"   \
            --compress="gz" --output="$out_binary_path"            \
            "boot/grub/grub.cfg"
    cd - >/dev/null # return to previous dir
}
